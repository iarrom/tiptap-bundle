import { PluginView } from "@tiptap/pm/state";
import { Plugin, PluginKey } from "prosemirror-state";
import { BlockNoteEditor } from "../../BlockNoteEditor";
import { BaseUiElementCallbacks, BaseUiElementState } from "../../shared/BaseUiElementTypes";
import { Block, BlockSchema } from "../Blocks/api/blockTypes";
import { Editor } from "@tiptap/core";
export type SideMenuCallbacks = BaseUiElementCallbacks & {
    addBlock: () => void;
    freezeMenu: () => void;
    unfreezeMenu: () => void;
    blockDragStart: (event: DragEvent) => void;
    blockDragEnd: () => void;
};
export type SideMenuState<BSchema extends BlockSchema> = BaseUiElementState & {
    block: Block<BSchema>;
};
export declare class SideMenuView<BSchema extends BlockSchema> implements PluginView {
    editor: BlockNoteEditor<BSchema>;
    ttEditor: Editor;
    private sideMenuState?;
    updateSideMenu: () => void;
    horizontalPosAnchoredAtRoot: boolean;
    horizontalPosAnchor: number;
    hoveredBlock: HTMLElement | undefined;
    isDragging: boolean;
    menuFrozen: boolean;
    constructor(editor: BlockNoteEditor<BSchema>, tiptapEditor: Editor, updateSideMenu: (sideMenuState: SideMenuState<BSchema>) => void);
    /**
     * Sets isDragging when dragging text.
     */
    onDragStart: () => void;
    /**
     * If the event is outside the editor contents,
     * we dispatch a fake event, so that we can still drop the content
     * when dragging / dropping to the side of the editor
     */
    onDrop: (event: DragEvent) => void;
    /**
     * If the event is outside the editor contents,
     * we dispatch a fake event, so that we can still drop the content
     * when dragging / dropping to the side of the editor
     */
    onDragOver: (event: DragEvent) => void;
    onKeyDown: (_event: KeyboardEvent) => void;
    onMouseDown: (_event: MouseEvent) => void;
    onMouseMove: (event: MouseEvent) => void;
    onScroll: () => void;
    destroy(): void;
    addBlock(): void;
}
export declare const sideMenuPluginKey: PluginKey<any>;
export declare function setupSideMenu<BSchema extends BlockSchema>(editor: BlockNoteEditor<BSchema>, tiptapEditor: Editor, updateSideMenu: (sideMenuState: SideMenuState<BSchema>) => void): {
    plugin: Plugin;
    callbacks: Omit<SideMenuCallbacks, "destroy">;
};
